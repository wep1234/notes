1.1基于词项和基于全文的搜索
 
 词项：
  基于term的查询，
        term level query：Term Query/Range Query/Exists Query/Prefix Query/Wildcard Query
	es中，term查询，对输入不做分词，会将输入作为一个整体，在倒排索引中查找准确的词项，并使用相关度算分公式为每个包含该词项的文档进行相关度算分
	可通过Constant Score将查询转换成一个Filtering，避免算分，并利用缓存，提高性能
全文
 基于全文的查询
     Match Query/Match Phrase Query/Query String Query
     索引和搜索时都会进行分词，查询字符串先传递到一个合适的分词器，然后生成一个供查询的词项列表
     查询时候，先会对输入的查询进行分词，然后对每个词项逐个进行底层的查询，最终将结果进行合并，并为每个文档生成一个算分。-例如查“Matrix reloaded”，会查到包括
     Matrix或者reloaded的所有结果


#es在没有指定分词器的时候，默认在text使用standard
DELETE products
PUT products
{
  "settings": {
    "number_of_shards": 1
  }
}

1.2 结构化搜索
	结构化数据
	  结构化搜索（Structured search）是指对结构化数据的搜索
	    日期，布尔类型和数字都是结构化的
	  文本也可以是结构化的
	    如彩色笔可以有离散的颜色集合：红，绿。蓝
	    一个博客可能被标记了标签，如分布式和搜索
	    电商网站上的商品都有UPCs(通用产品码Universal Product Codes)或其他的唯一标识，它们都需要遵从严格规定的，结构化的格式
	ES中的结构化搜索
	 布尔，时间，日期和数字这类结构化数据，有精确的格式，我们可以对这些格式进行逻辑操作，包括比较数字或时间的范围，或判断两个值的大小
	 结构化的文本可以做精确匹配或者部分匹配；Term查询/Prefix前缀查询
	 结构化结果只有“是“或”否“两个值
	   根据场景需要，可以决定结构化搜索是否需要打分

	数字Range：gt 大于 lt小于 gte 大于等于 lte 小于等于
	日期Range:
	   Date Math Expressions:2013-01-01 00:00:00||+1M
	   y:年 M:月 w:周 d:天 H/h:小时 m:分钟 s:秒

	结构化数据&结构化搜索：如果不需要算分，可以通过Constant Score，将查询转为Filtering
	范围查询和Date Math
	使用Exist查询处理非空Null值
	精确值&多值字段的精确查询：Term查询是包含，不是完全相等，针对多值字段查询尤其注意
	  
1.3 相关性和相关性算分
	相关性-Relevance
		搜索的相关性算分，描述一个文档和查询语句匹配的程度。Es会对每个匹配查询条件的结果进行算分
		打分的本质是排序，把最符合用户需求的文档排在前面。ES 5之前，默认相关性算法采用TF-IDF,现在采用BM 25
	词频 TF
		Term Frequency:检索词在一篇文档中出现的频率（出现次数/文档总字数）
		度量一条查询和结果文档相关性的简单方法：简单将搜索中每个词的TF进行相加
		Stop Word：如“的”在文档中出现了很多次，但是对贡献相关度几乎没有用处，不应考虑他们的TF
	逆文档频率 IDF
		DF:检索词在所有文档中出现的频率
		Inverse Document Frequency：简单说=log(全部文档数/检索词出现过的文档总数)
	TF-IDF 本质上就是将TF求和变成了加权求和
		TF(xx)*IDF(**)+TF(xxx)*IDF(xxx)+TF(x)*IDF(x)
	BM 25和经典的TF-IDF相比，当TF无限增加时，BM25算分会趋于一个数值
	定制Similarity
		bm25(d) = xxxxx     K默认值是1.2，数值越小，饱和度越高，b默认值是0.75（取值0-1），0表示禁止Normalization
	Boosting Relevance
		Boosting是控制相关度的一种手段（索引，字段或者查询子条件）
		参数boost含义：
			当boost>1时，打分的相关度相对性提升
			0<boost<1时，打分的权重相对性降低
			当boost<0时，贡献负分

1.4 Query&Filtering与多字符串多字段查询
	Query Context:相关性算分
	Filter Context:不需要算分（Yes or No），可以利用缓存，性能更好
	条件组合-复合查询 bool Query
	bool 查询
		一个bool查询，是一个或者多个查询子句的组合，共包含4种子句，2种影响算分（must，should），2种不影响算分（must_not,filter）
		相关性并不只适用于全文本检索，也适用于yes|no的子句，匹配的子句越多，相关性评分越高。若多条查询子句合并为一条复合查询，如bool查询，
		  则每个查询子句计算得到的评分会被合并到总的相关性评分中
	bool查询语法：子查询可以任意顺序出现，可以嵌套多个查询，如果bool查询中没有must条件，should中必须至少满足一条查询
	如何解决结构化查询-"包含而不是相等"的问题，增加一个genre count字段进行计数
	Filter Context-不影响算分
	Query Context-影响算分
	bool嵌套
	查询语句的结构，会对相关度算分产生影响：同一层级下的竞争字段，具有相同的权重，通过嵌套bool查询，可以改变对算分的影响
	通过boosting和boosting query可以控制查询的精确度

1.5 单字符串多字段查询：Dis Max Query
	单字符串查询：
		bool should查询：
		  算分过程：查询should语句的所有查询，加和所有查询的评分，乘以匹配语句的总数，除以所有语句的总数
		Disjunction Max Query查询（复合查询）
		  将任何与任一查询匹配的文档作为结果返回，采用字段上最匹配的评分最终返回
		  Tie Breaker参数：获得最佳匹配语句的评分_score,将其他匹配语句的评分与tie_breaker相乘，对以上评分求和并规范化
		  		 是一个介于0-1之间的浮点数，0代表使用最佳匹配，1代表所有语句同等重要

1.6 单字符串多字段查询：Multi Match
	三种场景
		1：最佳字段（Best Fields）当字段之间相互竞争，又相互关联，评分来自最匹配字段
		2：多数字段（Most Fields）处理英文内容时，一种常见的手段在主字段（Engilsh Analyzer）抽取词干，加入同义词，以匹配更多的文档。相同的文本，
		          加入子字段（Standard Analyzer），以提供更加精确的匹配，其他字段作为匹配文档提高相关度的信号。匹配字段越多越好
		3：混合字段（Cross Field）对于某些实体，例如人名，地址，图书信息，需要在多个字段中确定信息，单个字段只能作为整体的一部分。希望在任何列出的字段中
			找到尽可能多的词（支持使用Operator，与copy_to 相比，其中一个优势就是它可以在搜索时为单个字段提升权重）
	Multi Match Query 中 Best Fields是默认类型，可以不用指定，Minimum should match等参数可以传递到生成的query中

1.7 多语言以及中文分词检索
	一些中文分词器
		HanLP -面向生产环境的自然语言处理工具包 http://hanlp.com/   https://github.com/KennFalcon/elasticsearch-analysis-hanlp
		IK分词器 https://github.com/medcl/elasticsearch-analysis-ik
		Pinyin Analysis
	中文分词Demo
		使用不同的分词器测试效果
		索引时，尽量切分的短，查询的时候，尽量用长的词
		拼音分词器

1.8 Space Jam 一次全文搜索的实例
	
1.9 使用Search Template 和 Index Alias
	Search Template - 解耦程序&搜索DSL
	Index Alias 实现零停机运维 为索引定一个别名，通过别名读写数据

1.10 综合排序：Function Score Query优化算分
	算分与排序：
		es默认会以文档的相关度算分进行排序
		可以通过指定一个或者多个字段进行sort排序
		使用sort排序不够好，无法结合相关度对排序作出精确的控制
	Function Score Query
		可以在查询结束后，对每一个匹配的文档进行一系列的重新算分，根据新生成的分数进行排序
		提供了几种默认的计算分值的函数
			weight: 为每一个文档设置一个简单而不被规范化额权重
			Field Value Factor: 使用该数值来修改_score
			Random Score: 为每一个yoghurt使用第一个不同的随机算分结果
			衰减函数：以某个字段的值为标准，距离某个值越近，得分越高
			Script Score：自定义脚本完全控制所需逻辑
		field_value_factor 
		   使用Modifier平滑曲线
		       Modifier:none/log/log1p/log2p/ln/ln1p/ln2p/square/sqrt/reciprocal
		   引入Factor
	Boost Mode和Max Boost
	    Boost Mode
	    	Multiply: 算分与函数值的乘积
		Sum: 算分与函数的和
		Min/Max: 算分与函数取最小/最大值
		Replace: 使用函数值取代算分
	    Max Boost可以将算分控制在一个最大值
	一致性随机函数：每个人看到不同的随机排名，同个用户访问时，看到结果的相对顺序保持一致(通过控制seed)
		 "query": {
		    "function_score": {
		      "random_score": {
			"field": "votes",
			"seed": 8888
		      }
		    }

1.11 Term & Phrash Suggester（在用户输入的过程中自动补全或纠错）
	Es 通过Suggester Api实现，将输入的文本分解为Token，然后在索引的字典里查找相识的Term并返回
	根据不同的使用场景，Es设计了4种类别的Suggesters：Term & Phrase Suggester/Complete & Context Suggester

	Term Suggester
	   "suggest": {
	    "term-suggestion": {
	      "text": "lucen rock",
	      "term": {
		"suggest_mode": "missing",
		"field": "body"
	      }
	    }
	    几种Suggestion Mode：
	    	Missing - 如果索引中已经存在，就不提供建议
		Popular - 推荐出现频率更加高的词
		Always  - 无论是否存在，都提供建议
	    Sorting by Frequency & Prefix Length 
	        默认按照score排序，也可以按照frequency
		默认首字母不一致就不会匹配推荐，但是如果将prefix_length 设置为0，就会为hock建议rock
	Phrase Suggester 在Term Suggester上增加了一些额外的逻辑
	    一些参数
	    	Suggest Mode：missing,popular,always
		Max Errors:最多可以拼错的Terms数
		Confidence:限制返回结果数，默认为1

1.12 自动补全与基于上下文的提示
	The Completion Suggester
	    Completion Suggester提供了“自动完成”的功能，用户每输入一个字符，就需要即时发送一个查询请求到后端查找匹配项
	    对性能要求比较苛刻，es采用了不同的数据结构，不通过倒排索引来完成，而是将Analyze的数据编码成FST（Finite State Transducer）和索引一起存放，
	    FST会被ES整个加载进内存，速度很快
	    FST 只能用于前缀查找
	使用Completion Suggester步骤：
	    定义Mapping,使用“completion” type
	    索引数据
	    运行“suggest”查询，得到搜索建议
	Context Suggester
	    Completion Suggester的扩展，可以在搜索中加入更多的上下文信息
	实现Context Suggester：
	    可以定义两种类型的Context：Category -任意的字符串  Geo -地理位置信息
	    实现Conetxt Suggester的具体步骤：
	        定制一个Mapping
		索引数据，并且为每个文档加入Context信息
		结合Context进行Suggestion查询
	精准度和召回率
	    精准度：Completion>Phrase>Term
	    召回率:Term>Phrase>Completion
	    性能:Completion>Phrase>Term
