keytool的使用

@since 2018-06-28
@author pzp

关键字
密钥库 库条目 证书 库类型 密钥算法 签名算法

Keytool将密钥（key）和证书（certificates）存在一个称为keystore的文件中。
在keystore里，包含两种数据： 
- 密钥实体（Key entity）—— 密钥（secret key）又或者是私钥和配对公钥（采用非对称加密）。
- 可信任的证书实体（trusted certificate entries）—— 只包含公钥。

查询使用方法
===========================================================================================
keytool -help
keytool 命令 -help
命令:
 -certreq            生成证书请求
 -changealias        更改条目的别名
 -delete             删除条目
 -exportcert         导出证书
 -genkeypair         生成密钥对
 -genseckey          生成密钥
 -gencert            根据证书请求生成证书
 -importcert         导入证书或证书链
 -importpass         导入口令
 -importkeystore     从其他密钥库导入一个或所有条目
 -keypasswd          更改条目的密钥口令
 -list               列出密钥库中的条目
 -printcert          打印证书内容
 -printcertreq       打印证书请求的内容
 -printcrl           打印 CRL 文件的内容
 -storepasswd        更改密钥库的存储口令

密钥库条目操作
===========================================================================================
1.添加密钥库条目
# 创建证书（如果密钥库不存在）
keytool -genkey -alias test -keyalg rsa -keysize 2048 -keystore test.jks -dname "CN=localhost,OU=localhost,O=localhost,L=hz,S=zj,C=CN" -keypass testabc -storepass testabc -validity 3650
# pkcs12密钥库
keytool -genkey -alias test -keyalg rsa -keysize 2048 -keystore test.p12 -storetype pkcs12 -dname "CN=localhost,OU=localhost,O=localhost,L=hz,S=zj,C=CN" -storepass testabc -validity 3650
keytool -genkey -alias testa -keyalg rsa -keysize 2048 -keystore test.p12 -storetype pkcs12 -dname "CN=localhost,OU=localhost,O=localhost,L=hz,S=zj,C=CN" -storepass testabc -validity 3650

参数说明：
-genkey　　表示要创建一个新的密钥
-dname　　 表示密钥的Distinguished Names，表明了密钥的发行者身份
  CN=commonName      注：生成证书时，CN要和服务器的域名相同，如果在本地测试，则使用localhost
  OU=organizationUnit
  O=organizationName
  L=localityName
  S=stateName
  C=country

-keyalg　　　　使用加密的算法，这里是RSA
-keysize       密钥大小，比特位数表示
-alias　　　　 和keystore关联的别名，这个alias通常不区分大小写
-keypass　　   私有密钥的密码，这里设置为testabc
-keystore 　　 密钥保存当前目录下的test.jks文件中
-storetype     密钥库类型（默认为JKS），java8后建议使用标准的pkcs12
-storepass 　　密钥库存取密码，这里设置为testabc，这个密码提供系统从test.jks文件中将信息取出
-validity　　  该密钥的有效期为3650天 (默认为90天)

下面是各选项的缺省值。 
-alias "mykey"
-keyalg "DSA"
-keysize 1024
-validity 90
-keystore 用户宿主目录中名为.keystore 的文件
-storetype JKS
-file 读时为标准输入，写时为标准输出

cacerts证书文件(The cacerts Certificates File)
该证书文件存在于java.home\jre\lib\security目录下，是Java系统的CA证书仓库。

2.查看密钥库条目
keytool -list -v -keystore test.jks -storepass testabc
keytool -list -v -alias test -keystore test.jks -storepass testabc
keytool -list -rfc -keystore test.jks -storepass testabc

3.修改密钥库条目
keytool -keypasswd -alias test -keystore test.jks
# 修改别名
keytool -changealias -keystore test.jks -alias test

4.删除密钥库条目
keytool -delete -alias test -keystore test.jks

密钥库证书操作
=====================================================================================
如何判断证书文件是文本格式还是二进制格式？
您可以使用以下方法简单区分带有后缀扩展名的证书文件：

*.DER或*.CER文件： 这样的证书文件是二进制格式，只含有证书信息，不包含私钥。
*.CRT文件： 这样的证书文件可以是二进制格式，也可以是文本格式，一般均为文本格式，功能与 *.DER及*.CER证书文件相同。
*.PEM文件： 这样的证书文件一般是文本格式，可以存放证书或私钥，或者两者都包含。 *.PEM文件如果只包含私钥，一般用*.KEY文件代替。
*.PFX或*.P12文件： 这样的证书文件是二进制格式，同时包含证书和私钥，且一般有密码保护。

1.导出证书，由客户端安装
# 二进制格式
keytool -export -alias test -keystore test.jks -file test.cer -storepass testabc
# base64格式
keytool -export -rfc -alias test -keystore test.jks -file test.crt -storepass testabc

2.将证书导入jre
keytool -import -trustcacerts -alias test -keystore "%JAVA_HOME%/jre/lib/security/cacerts" -file test.cer -storepass changeit

3.将JKS格式证书转换成PFX格式
您可以使用JDK中自带的Keytool工具，将JKS格式证书文件转换成PFX格式。例如，您可以执行以下命令将test.jks证书文件转换成test.pfx证书文件：

keytool -importkeystore -srckeystore test.jks -destkeystore test.pfx -srcstoretype JKS -deststoretype PKCS12

4.将PFX格式证书转换为JKS格式
您可以使用JDK中自带的Keytool工具，将PFX格式证书文件转换成JKS格式。例如，您可以执行以下命令将test.pfx证书文件转换成testa.jks证书文件：

keytool -importkeystore -srckeystore test.pfx -destkeystore testa.jks  -srcstoretype PKCS12 -deststoretype JKS

5.将PEM/KEY/CRT格式证书转换为PFX格式
您可以使用 OpenSSL工具，将KEY格式密钥文件和CRT格式公钥文件转换成PFX格式证书文件。例如，将您的KEY格式密钥文件（test.key）和
CRT格式公钥文件（test.crt）拷贝至OpenSSL工具安装目录，使用OpenSSL工具执行以下命令将证书转换成test.pfx证书文件：

openssl pkcs12 -export -out test.pfx -inkey test.key -in test.crt

6.将PFX转换为PEM/KEY/CRT
可以使用 OpenSSL工具，将PFX格式证书文件转化为KEY格式密钥文件和CRT格式公钥文件。例如，将您的PFX格式证书文件拷贝至OpenSSL安装目录，使用
OpenSSL工具执行以下命令将证书转换成test.pem证书文件，KEY格式密钥文件（test.key）和CRT格式公钥文件（test.crt）：

openssl pkcs12 -in test.pfx -nodes -out test.pem
openssl rsa -in test.pem -out test.key
openssl x509 -in test.pem -out test.crt Note: 此转换步骤是专用于通过keytool工具生成私钥和CSR申请证书文件的，并且通过此方法您可以
在获取到PEM格式证书公钥的情况下分离私钥。

