docker 
1.1 centos安装
    1.1.1:查看内核版本 uname -r  高于3.10 安装
    1.1.2:yum 安装到最新  yum update （不是root用户加sudo）
    1.1.3:如果有以前版本的先移除
	 $ sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-selinux \
                  docker-engine-selinux \
                  docker-engine
    1.1.4:安装一些必要的系统工具：sudo yum install -y yum-utils device-mapper-persistent-data lvm2
    1.1.5:添加软件源信息：sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
    1.1.6:更新 yum 缓存：sudo yum makecache fast
    1.1.7:安装 Docker-ce：sudo yum -y install docker-ce\
    1.1.8:启动 Docker 后台服务:sudo systemctl start docker
    配置镜像
    cd /etc/docker/
    vi daemon.json
    {
	"registry-mirrors": ["http://hub-mirror.c.163.com"]
    }
    重新加载文件
    systemctl daemon-reload

   重启docker服务
   systemctl restart docker

没有docker-compose 命令
1.安装扩展源
sudo yum -y install epel-release

2.安装python-pip模块
sudo yum install python-pip

3.查看docker-compose版本
docker-compose version

# 提示未找到命令

4.通过以命令进行安装
cd /usr/local/bin/
wget https://github.com/docker/compose/releases/download/1.24.1/docker-compose-Linux-x86_64

rename docker-compose-Linux-x86_64 docker-compose docker-compose-Linux-x86_64

chmod +x /usr/local/bin/docker-compose

5.再通过docker-compose version命令进行查看


Docker常用命令
1.镜像相关
搜索镜像仓库中的镜像

docker search <image>
从镜像仓库下载镜像到本地

docker pull <image>
列出本地已下载的镜像

docker images
删除本地镜像

docker rmi <image>
2.容器相关
新建并启动容器

docker run
    -d 选项：后台运⾏
    -e 选项：设置环境变量
    -p 选项：端口映射（宿主端⼝:容器端⼝）
    --name 选项：指定容器名称
    --link 选项：链接不同容器
    -v 选项：目录映射（宿主⽬录:容器⽬录）
停止容器

docker stop <容器名>
删除已停止的容器

docker rm <容器名>
启动已停止的容器

docker start <容器名>
列出运行中的容器

docker ps <容器名>
查看容器日志

docker logs <容器名>

启动MongoDB
1.下载镜像
docker pull mongo
2.新建并启动容器
视频的课件上给出了Linux环境的命令：

docker run --name mongo -p 27017:27017 -v ~/docker-data/mongo:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin -d mongo
如果在Windows电脑上，我们需要修改后再执行，主要是修改-v后面的映射目录。理论上我们改成下面这样即可执行（需提前在D盘创建两层文件夹docker-data和mongo）。

-v d:/docker-data/mongo:/data/db
然而，在Windows 10环境下这是一个巨坑，实际会出现权限问题，无法正常启动。

解决办法是，不使用具体的本地目录，而是用Docker的数据卷（Volume），可以理解为虚拟磁盘。

首先，创建数据卷：

docker volume create --name mongodata
然后，新建并启动容器：

docker run --name mongo -p 27017:27017 -v mongodata:/data/db -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=admin -d mongo
可用ps命令查看是否启动成功：

docker ps
3.登录MongoDB
登录到 MongoDB 容器中：

docker exec -it mongo bash
通过 Shell 连接 MongoDB：

mongo -u admin -p admin
